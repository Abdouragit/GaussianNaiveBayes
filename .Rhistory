# Install and load necessary libraries
# install.packages("MASS")
library(MASS)
# Define the R6 class for Gaussian Naive Bayes
GaussianNaiveBayes <- R6Class("GaussianNaiveBayes",
public = list(
# Constructor
initialize = function(data, target) {
# Initialize the model with data and target variable
self$data <- data
self$target <- target
self$model <- NULL
},
# Train the Gaussian Naive Bayes model
train = function() {
# Assuming data is a data frame and target is a character column
self$model <- naiveBayes(as.formula(paste(self$target, "~ .")), data = self$data)
},
# Method to print the model details
Print = function() {
cat("Gaussian Naive Bayes Model:\n")
cat("Trained on:", self$target, "\n")
cat("Number of features:", length(colnames(self$data)), "\n")
# Add more information about the model if needed
},
# Method to provide a summary of the model
Summary = function() {
if (is.null(self$model)) {
stop("Model not trained. Use 'train' method first.")
}
cat("Summary of Gaussian Naive Bayes Model:\n")
cat("Trained on:", self$target, "\n")
# Add more summary information based on the characteristics of your model
}
)
)
# Install and load necessary libraries
# install.packages("MASS")
library(MASS)
library(R6)
# Define the R6 class for Gaussian Naive Bayes
GaussianNaiveBayes <- R6Class("GaussianNaiveBayes",
public = list(
# Constructor
initialize = function(data, target) {
# Initialize the model with data and target variable
self$data <- data
self$target <- target
self$model <- NULL
},
# Train the Gaussian Naive Bayes model
train = function() {
# Assuming data is a data frame and target is a character column
self$model <- naiveBayes(as.formula(paste(self$target, "~ .")), data = self$data)
},
# Method to print the model details
Print = function() {
cat("Gaussian Naive Bayes Model:\n")
cat("Trained on:", self$target, "\n")
cat("Number of features:", length(colnames(self$data)), "\n")
# Add more information about the model if needed
},
# Method to provide a summary of the model
Summary = function() {
if (is.null(self$model)) {
stop("Model not trained. Use 'train' method first.")
}
cat("Summary of Gaussian Naive Bayes Model:\n")
cat("Trained on:", self$target, "\n")
# Add more summary information based on the characteristics of your model
}
)
)
# Example usage:
# Create an instance of the class
gnb_model <- GaussianNaiveBayes$new(data = iris, target = "Species")
# Print model details
gnb_model$Print()
# Train the model
gnb_model$train()
# Create a synthetic dataframe
set.seed(123)
data <- data.frame(
Feature1 = rnorm(100),
Feature2 = rnorm(100),
Target = sample(c(0, 1), 100, replace = TRUE)
)
# Example usage:
# Create an instance of the class
gnb_model <- GaussianNaiveBayes$new(data = data, target = "Species")
gnb_model <- GaussianNaiveBayes$initialize(data = data, target = "Species")
gnb_model <- GaussianNaiveBayes$initialize(data = data, target = data$Target)
cat('1')
'barbara'$width
width('barabara')
'barbara'.width
barbara
b = "barbara"
getOption(b)
getOption(b,'width')
summary(data)
model <- "Gaussian Naive Bayes"
n_char <- getOption("width")
str_left_right <- paste0(rep("=", floor((n_char - nchar(model)) / 2)),
collapse = "")
getOption("width")
len('baba')
length('baba')
nchar('data')
getOption("width")
floor('baba')
floor(1 -1 )
floor(1-4)
find_modalities_and_count <- function(data, column_name) {
# Extract the specified column from the data
column <- data[[column_name]]
# Use the table function to count occurrences of each modality
modality_counts <- table(column)
# Print the results
cat("Modalities and their counts for column", column_name, ":\n")
for (modality in names(modality_counts)) {
cat(modality, ": ", modality_counts[modality], " occurrences\n")
}
}
# Example usage:
# Create a sample dataframe
sample_data <- data.frame(
ID = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
Category = c("A", "B", "A", "C", "B", "C", "A", "B", "C", "A")
)
# Call the function
find_modalities_and_count(sample_data, "Category")
find_modalities_and_count_df <- function(data, column_name) {
# Extract the specified column from the data
column <- data[[column_name]]
# Use the table function to count occurrences of each modality
modality_counts <- table(column)
# Create a data frame with the modalities and counts
result_df <- data.frame(Modality = names(modality_counts), Count = as.numeric(modality_counts))
# Return the data frame
return(result_df)
}
# Example usage:
# Create a sample dataframe
sample_data <- data.frame(
ID = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
Category = c("A", "B", "A", "C", "B", "C", "A", "B", "C", "A")
)
# Call the function and print the result
result_df <- find_modalities_and_count_df(sample_data, "Category")
print(result_df)
prop.table(result_df)
prop.table(result_df$Count)
cat(1,2,3)
cat(collapse = "\n")
cat(collapse = "\n    - ")
View(sample_data)
View(sample_data)
table(sample_data)
print(as.data.frame(table(sample_data)))
cat(table(sample_data))
cat(sample_data)
lapply(split(sample_data, seq(nrow(sample_data))),function(line) cat(paste(line, collapse = ", "), "\n"))
print(split(sample_data, seq(nrow(sample_data))))
lapply(split(sample_data, seq(nrow(sample_data))),function(line) cat(line, "\n"))
lapply(split(sample_data, seq(nrow(sample_data))),function(line) cat(paste(line, collapse = ", "), "\n"))
print_data_frame <- function(data) {
# Convert the dataframe to a character matrix
data_matrix <- as.matrix(data)
# Print column names
cat("Column Names: ", paste(colnames(data), collapse = ", "), "\n")
# Print the data frame
cat("\nData Frame:\n")
cat("------------\n")
# Use apply to print each row
apply(data_matrix, 1, function(row) cat(paste(row, collapse = ", "), "\n"))
}
sample_data <- data.frame(
ID = 1:5,
Name = c("Alice", "Bob", "Charlie", "David", "Eva"),
Age = c(25, 30, 22, 35, 28)
)
# Call the function to print the data frame
print_data_frame(sample_data)
cat(table(sample_data$Age))
print(table(sample_data))
View(sample_data)
print(table(sample_data$Age))
prop.table(table(sample_data$Age))
